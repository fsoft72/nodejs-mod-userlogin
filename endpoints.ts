/*
 * This file has been generated by flow2code
 * See: https://flow.liwe.org
 */

import { ILRequest, ILResponse, ILError, ILiWE } from '../../liwe/types';
import { send_error, send_ok, typed_dict } from "../../liwe/utils";
import { locale_load } from '../../liwe/locale';

import { perms } from '../../liwe/auth';

import {
	// endpoints function
	delete_userlogin_del, get_userlogin_clear, get_userlogin_list,
	// functions
	
} from './methods';

import {
	UserLoginLog, UserLoginLogKeys, UserLoginLogPublic, UserLoginLogPublicKeys,
} from './types';

/*=== f2c_start __header ===*/

/*=== f2c_end __header ===*/

export const init = ( liwe: ILiWE ) => {
	const app = liwe.app;

	console.log( "    - userlogin " );

	liwe.cfg.app.languages.map( ( l ) => locale_load( "userlogin", l ) );
	userlogin_db_init ( liwe );

	app.get ( '/api/userlogin/list', perms( [ "userlogin.list" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { action, rows, skip, ___errors } = typed_dict( req.query as any, [
			{ name: "action", type: "string" },
			{ name: "rows", type: "number" },
			{ name: "skip", type: "number" }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		get_userlogin_list ( req, action, rows, skip, ( err: ILError, logs: UserLoginLogPublic ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { logs } );
		} );
	} );

	app.get ( '/api/userlogin/clear', perms( [ "userlogin.clear" ] ), ( req: ILRequest, res: ILResponse ) => {
		

		get_userlogin_clear ( req, ( err: ILError, ok: boolean ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { ok } );
		} );
	} );

	app.delete ( '/api/userlogin/del', perms( [ "userlogin.clear" ] ), ( req: ILRequest, res: ILResponse ) => {
		const { id, ___errors } = typed_dict( req.body, [
			{ name: "id", type: "string", required: true }
		] );

		if ( ___errors.length ) return send_error ( res, { message: `Parameters error: ${___errors.join ( ', ' )}` } );

		delete_userlogin_del ( req, id, ( err: ILError, ok: boolean ) => {
			if ( err?.quiet ) return;
			if ( err ) return send_error( res, err );

			send_ok( res, { ok } );
		} );
	} );

};
