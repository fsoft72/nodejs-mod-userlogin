/*
 * This file has been generated by flow2code
 * See: https://flow.liwe.org
 */

import { ILRequest, ILResponse, LCback, ILiweConfig, ILError, ILiWE } from '../../liwe/types';
import { $l } from '../../liwe/locale';
import { system_permissions_register } from '../system/methods';

import {
	UserLoginLog, UserLoginLogKeys, UserLoginLogPublic, UserLoginLogPublicKeys,
} from './types';

import _module_perms from './perms';

let _liwe: ILiWE = null;

const _ = ( txt: string, vals: any = null, plural = false ) => {
	return $l( txt, vals, plural, "userlogin" );
};

const COLL_USER_LOGIN_LOGS = "user_login_logs";

/*=== f2c_start __file_header === */
import { adb_collection_drop, adb_collection_init, adb_del_all, adb_del_all_raw, adb_del_one, adb_find_all, adb_record_add } from '../../liwe/db/arango';
import { liwe_event_register, LiWEEventSingleResponse } from '../../liwe/events';
import { USER_EVENT_LOGIN, USER_EVENT_LOGIN_TRY, USER_EVENT_LOGOUT } from '../user/events';
import { mkid } from '../../liwe/utils';

const _log_line = async ( req: ILRequest, data: any ) => {
	const res: LiWEEventSingleResponse = { ok: true };
	const { mode } = data;
	const id_user = data.user.id;
	const { domain, username } = data.user;

	const log: UserLoginLog = {
		id: mkid( 'log' ),
		id_user,
		domain,
		username,
		action: mode,
	};

	await adb_record_add( req.db, COLL_USER_LOGIN_LOGS, log );

	return res;
};
/*=== f2c_end __file_header ===*/

// {{{ get_userlogin_list ( req: ILRequest, action?: string, rows: number = 20, skip: number = 0, cback: LCBack = null ): Promise<UserLoginLogPublic[]>
/**
 *
 * @param action -  [opt]
 * @param rows - Number of rows to return [opt]
 * @param skip - Number of rows to skip [opt]
 *
 * @return logs: UserLoginLogPublic
 *
 */
export const get_userlogin_list = ( req: ILRequest, action?: string, rows: number = 20, skip: number = 0, cback: LCback = null ): Promise<UserLoginLogPublic[]> => {
	return new Promise( async ( resolve, reject ) => {
		/*=== f2c_start get_userlogin_list ===*/
		const logs: UserLoginLogPublic[] = await adb_find_all( req.db, COLL_USER_LOGIN_LOGS, {}, UserLoginLogPublicKeys, {
			sort: [ { field: "created", desc: 1 } ],
			skip,
			rows,
		} );

		return cback ? cback( req, { ok: true, logs } ) : resolve( logs );
		/*=== f2c_end get_userlogin_list ===*/
	} );
};
// }}}

// {{{ get_userlogin_clear ( req: ILRequest, cback: LCBack = null ): Promise<boolean>
/**
 *
 *
 * @return ok: boolean
 *
 */
export const get_userlogin_clear = ( req: ILRequest, cback: LCback = null ): Promise<boolean> => {
	return new Promise( async ( resolve, reject ) => {
		/*=== f2c_start get_userlogin_clear ===*/

		/*=== f2c_end get_userlogin_clear ===*/
	} );
};
// }}}

// {{{ delete_userlogin_del ( req: ILRequest, id: string, cback: LCBack = null ): Promise<boolean>
/**
 *
 * @param id - UserLoginLog ID to be removed [req]
 *
 * @return ok: boolean
 *
 */
export const delete_userlogin_del = ( req: ILRequest, id: string, cback: LCback = null ): Promise<boolean> => {
	return new Promise( async ( resolve, reject ) => {
		/*=== f2c_start delete_userlogin_del ===*/
		await adb_del_one( req.db, COLL_USER_LOGIN_LOGS, { id } );

		return cback ? cback( req, { ok: true } ) : resolve( true );
		/*=== f2c_end delete_userlogin_del ===*/
	} );
};
// }}}

// {{{ userlogin_db_init ( liwe: ILiWE, cback: LCBack = null ): Promise<boolean>
/**
 *
 * Initializes the module's database
 *
 * @param liwe - The Liwe object [req]
 *
 * @return : boolean
 *
 */
export const userlogin_db_init = ( liwe: ILiWE, cback: LCback = null ): Promise<boolean> => {
	return new Promise( async ( resolve, reject ) => {
		_liwe = liwe;

		system_permissions_register( 'userlogin', _module_perms );

		await adb_collection_init( liwe.db, COLL_USER_LOGIN_LOGS, [
			{ type: "persistent", fields: [ "id" ], unique: true },
			{ type: "persistent", fields: [ "domain" ], unique: false },
			{ type: "persistent", fields: [ "id_user" ], unique: false },
			{ type: "persistent", fields: [ "action" ], unique: false },
		], { drop: false } );

		/*=== f2c_start userlogin_db_init ===*/
		liwe_event_register( 'user', USER_EVENT_LOGIN, _log_line );
		liwe_event_register( 'user', USER_EVENT_LOGOUT, _log_line );
		liwe_event_register( 'user', USER_EVENT_LOGIN_TRY, _log_line );
		/*=== f2c_end userlogin_db_init ===*/
	} );
};
// }}}


